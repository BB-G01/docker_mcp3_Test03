version: '3.8'

# ─── 공통 로깅 설정 ───────────────────────────────
x-common-logging: &common-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

# ─── Ollama LLM 베이스 설정 ───────────────────────
x-ollama-base: &ollama-base
  image: ollama/ollama:latest
  volumes:
    - ollama_data:/root/.ollama
  logging: *common-logging

services:
  # 모델별 개별 컨테이너
  agent_a:
    <<: *ollama-base
    container_name: ai_agent_a
    ports:
      - "11434:11434"
    environment:
      - OLLAMA_MODEL=llama3:8b
    deploy:
      resources:
        limits:
          memory: "8g"
          cpus: "2"
    env_file: .env

  agent_b:
    <<: *ollama-base
    container_name: ai_agent_b
    ports:
      - "11435:11434"
    environment:
      - OLLAMA_MODEL=deepseek-coder:6.7b
    deploy:
      resources:
        limits:
          memory: "8g"
          cpus: "2"
    env_file: .env

  agent_c:
    <<: *ollama-base
    container_name: ai_agent_c
    ports:
      - "11436:11434"
    environment:
      - OLLAMA_MODEL=phi3:mini
    deploy:
      resources:
        limits:
          memory: "4g"
          cpus: "1"
    env_file: .env

  agent_o4_mini:
    image: ollama/ollama:latest
    container_name: agent_o4_mini
    environment:
      - OLLAMA_MODEL=gpt-o4-mini
    deploy:
      resources:
        limits:
          memory: "4g"
          cpus: "1"
    env_file: .env

  agent_o4_mini_high:
    image: ollama/ollama:latest
    container_name: agent_o4_mini_high
    environment:
      - OLLAMA_MODEL=gpt-o4-mini-high
    deploy:
      resources:
        limits:
          memory: "6g"
          cpus: "2"
    env_file: .env

  quantize:
    image: ollama/quantize:latest
    container_name: ollama_quantize
    entrypoint:
      - "sh"
      - "-c"
      - "while true; do sleep 3600; done"
    volumes:
      - ollama_data:/root/.ollama
    logging: *common-logging
    deploy:
      resources:
        limits:
          memory: "2g"
          cpus: "0.5"
    env_file: .env

  # Qdrant 벡터 DB 및 백업
  qdrant:
    image: qdrant/qdrant:latest
    container_name: vector_db
    ports:
      - "6333:6333"
    volumes:
      - qdrant_storage:/qdrant/storage
    logging: *common-logging
    deploy:
      resources:
        limits:
          memory: "512m"
          cpus: "0.25"
    env_file: .env

  qdrant_backup:
    image: qdrant/qdrant-backup:latest
    container_name: qdrant_backup
    environment:
      - QDRANT_API_KEY=${QDRANT_API_KEY}
    volumes:
      - qdrant_storage:/qdrant/storage
    entrypoint: ["sh", "-c", "backup.sh"]
    deploy:
      resources:
        limits:
          memory: "1g"
          cpus: "0.25"
    env_file: .env

  # n8n 워크플로 엔진
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n_mcp
    env_file: .env
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      - postgres
    logging: *common-logging
    deploy:
      resources:
        limits:
          memory: "2g"
          cpus: "1"
    restart: unless-stopped

  # PostgreSQL DB
  postgres:
    image: postgres:15-alpine
    container_name: postgres_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=n8n
    volumes:
      - postgres_data:/var/lib/postgresql/data
    logging: *common-logging
    deploy:
      resources:
        limits:
          memory: "1g"
          cpus: "0.5"
    env_file: .env

  # Traefik 리버스 프록시 및 SSL
  traefik:
    image: traefik:latest
    container_name: traefik_proxy
    command:
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.docker=true
      - --certificatesresolvers.le.acme.tlschallenge=true
      - --certificatesresolvers.le.acme.email=${LETSENCRYPT_EMAIL}
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
      - --api.dashboard=true
      - --api.insecure=false
      - --entryPoints.web.auth.basic.users=user:password
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_cert:/letsencrypt
    logging: *common-logging
    deploy:
      resources:
        limits:
          memory: "500m"
          cpus: "0.2"
    env_file: .env

  # InfluxDB + Grafana 모니터링
  influxdb:
    image: influxdb:2.7
    container_name: influx_db
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=adminpass
      - INFLUXDB_BUCKET=n8n_metrics
      - INFLUXDB_ORG=team_bemini
    volumes:
      - influxdb_data:/var/lib/influxdb2
    logging: *common-logging
    deploy:
      resources:
        limits:
          memory: "500m"
          cpus: "0.5"
    env_file: .env

  grafana:
    image: grafana/grafana:latest
    container_name: grafana_dashboard
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - influxdb
    logging: *common-logging
    deploy:
      resources:
        limits:
          memory: "500m"
          cpus: "0.5"
    env_file: .env

volumes:
  ollama_data:
  n8n_data:
  postgres_data:
  traefik_cert:
  influxdb_data:
  grafana_data:
  qdrant_storage:
